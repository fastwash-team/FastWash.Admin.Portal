/* tslint:disable */
/* eslint-disable */
/**
 * FastWash Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  // setApiKeyToObject,
  // setBasicAuthToObject,
  // setBearerAuthToObject,
  // setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  // COLLECTION_FORMATS,
  BaseAPI,
  // RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface AdditionalWashOrderDTO
 */
export interface AdditionalWashOrderDTO {
  /**
   *
   * @type {WashStatus}
   * @memberof AdditionalWashOrderDTO
   */
  washStatus?: WashStatus;
  /**
   *
   * @type {number}
   * @memberof AdditionalWashOrderDTO
   */
  totalWashItems?: number;
  /**
   *
   * @type {Array<WashItemData>}
   * @memberof AdditionalWashOrderDTO
   */
  washItemData?: Array<WashItemData> | null;
}

/**
 *
 * @export
 * @interface ApplicationUserDTO
 */
export interface ApplicationUserDTO {
  /**
   *
   * @type {string}
   * @memberof ApplicationUserDTO
   */
  userEmail?: string | null;
  /**
   *
   * @type {string}
   * @memberof ApplicationUserDTO
   */
  userPhoneNumber?: string | null;
  /**
   *
   * @type {string}
   * @memberof ApplicationUserDTO
   */
  userName?: string | null;
  /**
   *
   * @type {number}
   * @memberof ApplicationUserDTO
   */
  applicationUserId?: number;
  /**
   *
   * @type {UserType}
   * @memberof ApplicationUserDTO
   */
  userType?: UserType;
  /**
   *
   * @type {UserStatus}
   * @memberof ApplicationUserDTO
   */
  userStatus?: UserStatus;
}

/**
 *
 * @export
 * @interface ApplicationUserData
 */
export interface ApplicationUserData {
  /**
   *
   * @type {string}
   * @memberof ApplicationUserData
   */
  userEmail?: string | null;
  /**
   *
   * @type {string}
   * @memberof ApplicationUserData
   */
  userPhoneNumber?: string | null;
  /**
   *
   * @type {string}
   * @memberof ApplicationUserData
   */
  userName?: string | null;
}
/**
 *
 * @export
 * @interface CompleteLoginDTO
 */
export interface CompleteLoginDTO {
  /**
   *
   * @type {string}
   * @memberof CompleteLoginDTO
   */
  passCode: string;
}
/**
 *
 * @export
 * @interface ExternalWashOrderPlanDTO
 */
export interface ExternalWashOrderPlanDTO {
  /**
   *
   * @type {string}
   * @memberof ExternalWashOrderPlanDTO
   */
  location?: string | null;
  /**
   *
   * @type {Array<WashOrderPlanData>}
   * @memberof ExternalWashOrderPlanDTO
   */
  washOrderPlanData?: Array<WashOrderPlanData> | null;
}
/**
 *
 * @export
 * @interface InitializeTransactionDTO
 */
export interface InitializeTransactionDTO {
  /**
   *
   * @type {string}
   * @memberof InitializeTransactionDTO
   */
  email: string;
  /**
   *
   * @type {number}
   * @memberof InitializeTransactionDTO
   */
  amount: number;
  /**
   *
   * @type {string}
   * @memberof InitializeTransactionDTO
   */
  reference: string;
}
/**
 *
 * @export
 * @interface InitiateLoginDTO
 */
export interface InitiateLoginDTO {
  /**
   *
   * @type {string}
   * @memberof InitiateLoginDTO
   */
  userId: string;
  /**
   *
   * @type {boolean}
   * @memberof InitiateLoginDTO
   */
  isSystemInitiated: boolean;
}
/**
 *
 * @export
 * @interface InternalTransactionHistoryDTO
 */
export interface InternalTransactionHistoryDTO {
  /**
   *
   * @type {string}
   * @memberof InternalTransactionHistoryDTO
   */
  transactionReference?: string | null;
  /**
   *
   * @type {number}
   * @memberof InternalTransactionHistoryDTO
   */
  transactionAmount?: number;
  /**
   *
   * @type {TransactionChannel}
   * @memberof InternalTransactionHistoryDTO
   */
  transactionChannel?: TransactionChannel;
  /**
   *
   * @type {TransactionStatus}
   * @memberof InternalTransactionHistoryDTO
   */
  transactionStatus?: TransactionStatus;
  /**
   *
   * @type {string}
   * @memberof InternalTransactionHistoryDTO
   */
  dateCreated?: string | null;
  /**
   *
   * @type {string}
   * @memberof InternalTransactionHistoryDTO
   */
  washOrderReference?: string | null;
  /**
   *
   * @type {TransactionTag}
   * @memberof InternalTransactionHistoryDTO
   */
  transactionTag?: TransactionTag;
  /**
   *
   * @type {WashOrderDTO}
   * @memberof InternalTransactionHistoryDTO
   */
  washOrder?: WashOrderDTO;
}

/**
 *
 * @export
 * @interface InternalTransactionHistoryDTOPaginatedList
 */
export interface InternalTransactionHistoryDTOPaginatedList {
  /**
   *
   * @type {Array<InternalTransactionHistoryDTO>}
   * @memberof InternalTransactionHistoryDTOPaginatedList
   */
  data?: Array<InternalTransactionHistoryDTO> | null;
  /**
   *
   * @type {number}
   * @memberof InternalTransactionHistoryDTOPaginatedList
   */
  pageCount?: number;
  /**
   *
   * @type {number}
   * @memberof InternalTransactionHistoryDTOPaginatedList
   */
  pageIndex?: number;
  /**
   *
   * @type {number}
   * @memberof InternalTransactionHistoryDTOPaginatedList
   */
  pageSize?: number;
}
/**
 *
 * @export
 * @interface InternalWashOrderPlanDTO
 */
export interface InternalWashOrderPlanDTO {
  /**
   *
   * @type {string}
   * @memberof InternalWashOrderPlanDTO
   */
  washOrderPlanReference?: string | null;
  /**
   *
   * @type {string}
   * @memberof InternalWashOrderPlanDTO
   */
  scheduleStartTime?: string | null;
  /**
   *
   * @type {string}
   * @memberof InternalWashOrderPlanDTO
   */
  scheduleEndTime?: string | null;
  /**
   *
   * @type {number}
   * @memberof InternalWashOrderPlanDTO
   */
  numberOfOrders?: number;
  /**
   *
   * @type {string}
   * @memberof InternalWashOrderPlanDTO
   */
  scheduleDate?: string | null;
  /**
   *
   * @type {number}
   * @memberof InternalWashOrderPlanDTO
   */
  totalWashOrders?: number;
  /**
   *
   * @type {number}
   * @memberof InternalWashOrderPlanDTO
   */
  totalWashOrdersAmount?: number | null;
  /**
   *
   * @type {number}
   * @memberof InternalWashOrderPlanDTO
   */
  totalLogisticsAmount?: number | null;
  /**
   *
   * @type {string}
   * @memberof InternalWashOrderPlanDTO
   */
  location?: string | null;
  /**
   *
   * @type {number}
   * @memberof InternalWashOrderPlanDTO
   */
  logisticsAmount?: number;
  /**
   *
   * @type {ServiceType}
   * @memberof InternalWashOrderPlanDTO
   */
  serviceType?: ServiceType;
  /**
   *
   * @type {string}
   * @memberof InternalWashOrderPlanDTO
   */
  dateCreated?: string | null;
  /**
   *
   * @type {Array<WashOrderDTO>}
   * @memberof InternalWashOrderPlanDTO
   */
  washOrders?: Array<WashOrderDTO> | null;
}

/**
 *
 * @export
 * @interface InternalWashOrderPlanDTOPaginatedList
 */
export interface InternalWashOrderPlanDTOPaginatedList {
  /**
   *
   * @type {Array<InternalWashOrderPlanDTO>}
   * @memberof InternalWashOrderPlanDTOPaginatedList
   */
  data?: Array<InternalWashOrderPlanDTO> | null;
  /**
   *
   * @type {number}
   * @memberof InternalWashOrderPlanDTOPaginatedList
   */
  pageCount?: number;
  /**
   *
   * @type {number}
   * @memberof InternalWashOrderPlanDTOPaginatedList
   */
  pageIndex?: number;
  /**
   *
   * @type {number}
   * @memberof InternalWashOrderPlanDTOPaginatedList
   */
  pageSize?: number;
}
/**
 *
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
  [key: string]: any;

  /**
   *
   * @type {string}
   * @memberof ProblemDetails
   */
  type?: string | null;
  /**
   *
   * @type {string}
   * @memberof ProblemDetails
   */
  title?: string | null;
  /**
   *
   * @type {number}
   * @memberof ProblemDetails
   */
  status?: number | null;
  /**
   *
   * @type {string}
   * @memberof ProblemDetails
   */
  detail?: string | null;
  /**
   *
   * @type {string}
   * @memberof ProblemDetails
   */
  instance?: string | null;
}
/**
 *
 * @export
 * @enum {number}
 */

export const SearchWashStatus = {
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export type SearchWashStatus =
  (typeof SearchWashStatus)[keyof typeof SearchWashStatus];

/**
 *
 * @export
 * @enum {number}
 */

export const ServiceType = {
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export type ServiceType = (typeof ServiceType)[keyof typeof ServiceType];

/**
 *
 * @export
 * @interface SharedTransactionData
 */
export interface SharedTransactionData {
  /**
   *
   * @type {string}
   * @memberof SharedTransactionData
   */
  transactionReference: string;
  /**
   *
   * @type {number}
   * @memberof SharedTransactionData
   */
  transactionAmount: number;
  /**
   *
   * @type {TransactionTag}
   * @memberof SharedTransactionData
   */
  transactionTag: TransactionTag;
}

/**
 *
 * @export
 * @enum {number}
 */

export const TransactionChannel = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const;

export type TransactionChannel =
  (typeof TransactionChannel)[keyof typeof TransactionChannel];

/**
 *
 * @export
 * @interface TransactionData
 */
export interface TransactionData {
  /**
   *
   * @type {string}
   * @memberof TransactionData
   */
  transactionReference: string;
  /**
   *
   * @type {number}
   * @memberof TransactionData
   */
  transactionAmount: number;
  /**
   *
   * @type {TransactionTag}
   * @memberof TransactionData
   */
  transactionTag: TransactionTag;
  /**
   *
   * @type {TransactionChannel}
   * @memberof TransactionData
   */
  transactionChannel: TransactionChannel;
}

/**
 *
 * @export
 * @interface TransactionHistoryDTO
 */
export interface TransactionHistoryDTO {
  /**
   *
   * @type {string}
   * @memberof TransactionHistoryDTO
   */
  transactionReference?: string | null;
  /**
   *
   * @type {number}
   * @memberof TransactionHistoryDTO
   */
  transactionAmount?: number;
  /**
   *
   * @type {TransactionChannel}
   * @memberof TransactionHistoryDTO
   */
  transactionChannel?: TransactionChannel;
  /**
   *
   * @type {TransactionStatus}
   * @memberof TransactionHistoryDTO
   */
  transactionStatus?: TransactionStatus;
  /**
   *
   * @type {string}
   * @memberof TransactionHistoryDTO
   */
  dateCreated?: string | null;
  /**
   *
   * @type {string}
   * @memberof TransactionHistoryDTO
   */
  washOrderReference?: string | null;
  /**
   *
   * @type {TransactionTag}
   * @memberof TransactionHistoryDTO
   */
  transactionTag?: TransactionTag;
}

/**
 *
 * @export
 * @enum {number}
 */

export const TransactionStatus = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const;

export type TransactionStatus =
  (typeof TransactionStatus)[keyof typeof TransactionStatus];

/**
 *
 * @export
 * @enum {number}
 */

export const TransactionTag = {
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export type TransactionTag =
  (typeof TransactionTag)[keyof typeof TransactionTag];

/**
 *
 * @export
 * @interface UserData
 */
export interface UserData {
  /**
   *
   * @type {string}
   * @memberof UserData
   */
  fullName: string;
  /**
   *
   * @type {string}
   * @memberof UserData
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserData
   */
  phoneNumber: string;
  /**
   *
   * @type {UserType}
   * @memberof UserData
   */
  userType: UserType;
}

/**
 *
 * @export
 * @enum {number}
 */

export const UserStatus = {
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus];

/**
 *
 * @export
 * @enum {number}
 */

export const UserType = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
} as const;

export type UserType = (typeof UserType)[keyof typeof UserType];

/**
 *
 * @export
 * @interface WashItemData
 */
export interface WashItemData {
  /**
   *
   * @type {string}
   * @memberof WashItemData
   */
  itemName: string;
  /**
   *
   * @type {number}
   * @memberof WashItemData
   */
  numberOfItem: number;
  /**
   *
   * @type {number}
   * @memberof WashItemData
   */
  itemAmount: number;
}
/**
 *
 * @export
 * @interface WashOrderComplaintDTO
 */
export interface WashOrderComplaintDTO {
  /**
   *
   * @type {string}
   * @memberof WashOrderComplaintDTO
   */
  complaintNote: string;
}
/**
 *
 * @export
 * @interface WashOrderCountDTO
 */
export interface WashOrderCountDTO {
  /**
   *
   * @type {number}
   * @memberof WashOrderCountDTO
   */
  activeOrders?: number;
  /**
   *
   * @type {number}
   * @memberof WashOrderCountDTO
   */
  completedOrders?: number;
}
/**
 *
 * @export
 * @interface WashOrderCreationDTO
 */
export interface WashOrderCreationDTO {
  /**
   *
   * @type {string}
   * @memberof WashOrderCreationDTO
   */
  streetAddress: string;
  /**
   *
   * @type {string}
   * @memberof WashOrderCreationDTO
   */
  location: string;
  /**
   *
   * @type {string}
   * @memberof WashOrderCreationDTO
   */
  orderDate: string;
  /**
   *
   * @type {ServiceType}
   * @memberof WashOrderCreationDTO
   */
  serviceType: ServiceType;
  /**
   *
   * @type {string}
   * @memberof WashOrderCreationDTO
   */
  orderNote?: string | null;
  /**
   *
   * @type {string}
   * @memberof WashOrderCreationDTO
   */
  estimatedDeliveryTime: string;
  /**
   *
   * @type {string}
   * @memberof WashOrderCreationDTO
   */
  pickupTime: string;
  /**
   *
   * @type {number}
   * @memberof WashOrderCreationDTO
   */
  logisticsAmount: number;
  /**
   *
   * @type {Array<WashItemData>}
   * @memberof WashOrderCreationDTO
   */
  washItemData: Array<WashItemData>;
  /**
   *
   * @type {UserData}
   * @memberof WashOrderCreationDTO
   */
  userData: UserData;
  /**
   *
   * @type {TransactionData}
   * @memberof WashOrderCreationDTO
   */
  transactionData: TransactionData;
}

/**
 *
 * @export
 * @interface WashOrderDTO
 */
export interface WashOrderDTO {
  /**
   *
   * @type {number}
   * @memberof WashOrderDTO
   */
  washOrderId: number;
  /**
   *
   * @type {string}
   * @memberof WashOrderDTO
   */
  washOrderReference?: string | null;
  /**
   *
   * @type {WashStatus}
   * @memberof WashOrderDTO
   */
  washStatus?: WashStatus;
  /**
   *
   * @type {ServiceType}
   * @memberof WashOrderDTO
   */
  serviceType?: ServiceType;
  /**
   *
   * @type {string}
   * @memberof WashOrderDTO
   */
  orderDate?: string | null;
  /**
   *
   * @type {string}
   * @memberof WashOrderDTO
   */
  dateCreated?: string | null;
  /**
   *
   * @type {string}
   * @memberof WashOrderDTO
   */
  location?: string | null;
  /**
   *
   * @type {number}
   * @memberof WashOrderDTO
   */
  orderAmount?: number;
  /**
   *
   * @type {string}
   * @memberof WashOrderDTO
   */
  orderNote?: string | null;
  /**
   *
   * @type {string}
   * @memberof WashOrderDTO
   */
  complaintNote?: string | null;
  /**
   *
   * @type {WashOrderCreationDTO}
   * @memberof WashOrderDTO
   */
  washOrderData?: WashOrderCreationDTO;
}

/**
 *
 * @export
 * @interface WashOrderDTOPaginatedList
 */
export interface WashOrderDTOPaginatedList {
  /**
   *
   * @type {Array<WashOrderDTO>}
   * @memberof WashOrderDTOPaginatedList
   */
  data?: Array<WashOrderDTO> | null;
  /**
   *
   * @type {number}
   * @memberof WashOrderDTOPaginatedList
   */
  pageCount?: number;
  /**
   *
   * @type {number}
   * @memberof WashOrderDTOPaginatedList
   */
  pageIndex?: number;
  /**
   *
   * @type {number}
   * @memberof WashOrderDTOPaginatedList
   */
  pageSize?: number;
}
/**
 *
 * @export
 * @interface WashOrderPlanCreationDTO
 */
export interface WashOrderPlanCreationDTO {
  /**
   *
   * @type {ServiceType}
   * @memberof WashOrderPlanCreationDTO
   */
  serviceType: ServiceType;
  /**
   *
   * @type {Array<WashOrderPlanCreationData>}
   * @memberof WashOrderPlanCreationDTO
   */
  washOrderPlanCreationData: Array<WashOrderPlanCreationData>;
}

/**
 *
 * @export
 * @interface WashOrderPlanCreationData
 */
export interface WashOrderPlanCreationData {
  /**
   *
   * @type {string}
   * @memberof WashOrderPlanCreationData
   */
  scheduleStartTime: string;
  /**
   *
   * @type {string}
   * @memberof WashOrderPlanCreationData
   */
  scheduleEndTime: string;
  /**
   *
   * @type {number}
   * @memberof WashOrderPlanCreationData
   */
  logisticsAmount: number;
  /**
   *
   * @type {string}
   * @memberof WashOrderPlanCreationData
   */
  scheduleDate: string;
  /**
   *
   * @type {string}
   * @memberof WashOrderPlanCreationData
   */
  location: string;
  /**
   *
   * @type {number}
   * @memberof WashOrderPlanCreationData
   */
  numberOfOrders?: number;
}
/**
 *
 * @export
 * @interface WashOrderPlanData
 */
export interface WashOrderPlanData {
  /**
   *
   * @type {string}
   * @memberof WashOrderPlanData
   */
  scheduleStartTime: string;
  /**
   *
   * @type {string}
   * @memberof WashOrderPlanData
   */
  scheduleEndTime: string;
  /**
   *
   * @type {number}
   * @memberof WashOrderPlanData
   */
  logisticsAmount: number;
  /**
   *
   * @type {string}
   * @memberof WashOrderPlanData
   */
  scheduleDate: string;
}
/**
 *
 * @export
 * @interface WashOrderReceivedCountDTO
 */
export interface WashOrderReceivedCountDTO {
  /**
   *
   * @type {number}
   * @memberof WashOrderReceivedCountDTO
   */
  preScheduledOrders?: number;
  /**
   *
   * @type {number}
   * @memberof WashOrderReceivedCountDTO
   */
  classicOrders?: number;
  /**
   *
   * @type {number}
   * @memberof WashOrderReceivedCountDTO
   */
  allOrders?: number;
}
/**
 *
 * @export
 * @interface WashOrderStatusDTO
 */
export interface WashOrderStatusDTO {
  /**
   *
   * @type {WashStatus}
   * @memberof WashOrderStatusDTO
   */
  washStatus?: WashStatus;
  /**
   *
   * @type {string}
   * @memberof WashOrderStatusDTO
   */
  statusNotes?: string | null;
  /**
   *
   * @type {string}
   * @memberof WashOrderStatusDTO
   */
  dateCreated?: string | null;
}

/**
 *
 * @export
 * @interface WashOrderStatusUpdateDTO
 */
export interface WashOrderStatusUpdateDTO {
  /**
   *
   * @type {number}
   * @memberof WashOrderStatusUpdateDTO
   */
  washOrderId: number;
  /**
   *
   * @type {WashStatus}
   * @memberof WashOrderStatusUpdateDTO
   */
  washStatus: WashStatus;
}

/**
 *
 * @export
 * @interface WashOrderUpdateDTO
 */
export interface WashOrderUpdateDTO {
  /**
   *
   * @type {SharedTransactionData}
   * @memberof WashOrderUpdateDTO
   */
  sharedTransactionData: SharedTransactionData;
  /**
   *
   * @type {Array<WashItemData>}
   * @memberof WashOrderUpdateDTO
   */
  washItemData: Array<WashItemData>;
}
/**
 *
 * @export
 * @enum {number}
 */

export const WashStatus = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_8: 8,
} as const;

export type WashStatus = (typeof WashStatus)[keyof typeof WashStatus];

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {CompleteLoginDTO} [completeLoginDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthenticationLoginCompletePut: async (
      completeLoginDTO?: CompleteLoginDTO,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Authentication/login/complete`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        completeLoginDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {InitiateLoginDTO} [initiateLoginDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthenticationLoginInitiatePost: async (
      initiateLoginDTO?: InitiateLoginDTO,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Authentication/login/initiate`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        initiateLoginDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UserData} [userData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthenticationSignupPost: async (
      userData?: UserData,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Authentication/signup`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userData,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    AuthenticationApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CompleteLoginDTO} [completeLoginDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAuthenticationLoginCompletePut(
      completeLoginDTO?: CompleteLoginDTO,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAuthenticationLoginCompletePut(
          completeLoginDTO,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "AuthenticationApi.apiAuthenticationLoginCompletePut"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {InitiateLoginDTO} [initiateLoginDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAuthenticationLoginInitiatePost(
      initiateLoginDTO?: InitiateLoginDTO,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAuthenticationLoginInitiatePost(
          initiateLoginDTO,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "AuthenticationApi.apiAuthenticationLoginInitiatePost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {UserData} [userData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAuthenticationSignupPost(
      userData?: UserData,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAuthenticationSignupPost(
          userData,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthenticationApi.apiAuthenticationSignupPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AuthenticationApiFp(configuration);
  return {
    /**
     *
     * @param {CompleteLoginDTO} [completeLoginDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthenticationLoginCompletePut(
      completeLoginDTO?: CompleteLoginDTO,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .apiAuthenticationLoginCompletePut(completeLoginDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {InitiateLoginDTO} [initiateLoginDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthenticationLoginInitiatePost(
      initiateLoginDTO?: InitiateLoginDTO,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .apiAuthenticationLoginInitiatePost(initiateLoginDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UserData} [userData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthenticationSignupPost(
      userData?: UserData,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .apiAuthenticationSignupPost(userData, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
  /**
   *
   * @param {CompleteLoginDTO} [completeLoginDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public apiAuthenticationLoginCompletePut(
    completeLoginDTO?: CompleteLoginDTO,
    options?: RawAxiosRequestConfig
  ) {
    return AuthenticationApiFp(this.configuration)
      .apiAuthenticationLoginCompletePut(completeLoginDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {InitiateLoginDTO} [initiateLoginDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public apiAuthenticationLoginInitiatePost(
    initiateLoginDTO?: InitiateLoginDTO,
    options?: RawAxiosRequestConfig
  ) {
    return AuthenticationApiFp(this.configuration)
      .apiAuthenticationLoginInitiatePost(initiateLoginDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserData} [userData]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public apiAuthenticationSignupPost(
    userData?: UserData,
    options?: RawAxiosRequestConfig
  ) {
    return AuthenticationApiFp(this.configuration)
      .apiAuthenticationSignupPost(userData, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PaystackApi - axios parameter creator
 * @export
 */
export const PaystackApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hooksPaystackProcessPost: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/hooks/Paystack/process`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PaystackApi - functional programming interface
 * @export
 */
export const PaystackApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PaystackApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async hooksPaystackProcessPost(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.hooksPaystackProcessPost(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PaystackApi.hooksPaystackProcessPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PaystackApi - factory interface
 * @export
 */
export const PaystackApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PaystackApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hooksPaystackProcessPost(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .hooksPaystackProcessPost(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PaystackApi - object-oriented interface
 * @export
 * @class PaystackApi
 * @extends {BaseAPI}
 */
export class PaystackApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaystackApi
   */
  public hooksPaystackProcessPost(options?: RawAxiosRequestConfig) {
    return PaystackApiFp(this.configuration)
      .hooksPaystackProcessPost(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ProfilesApi - axios parameter creator
 * @export
 */
export const ProfilesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiProfilesInternalListGet: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Profiles/internal/list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiProfilesProfileExternalGet: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Profiles/profile/external`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiProfilesProfileInternalGet: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Profiles/profile/internal`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} userId
     * @param {ApplicationUserData} [applicationUserData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiProfilesUserIdExternalPut: async (
      userId: number,
      applicationUserData?: ApplicationUserData,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("apiProfilesUserIdExternalPut", "userId", userId);
      const localVarPath = `/api/Profiles/{userId}/external`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        applicationUserData,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} userId
     * @param {ApplicationUserData} [applicationUserData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiProfilesUserIdInternalPut: async (
      userId: number,
      applicationUserData?: ApplicationUserData,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("apiProfilesUserIdInternalPut", "userId", userId);
      const localVarPath = `/api/Profiles/{userId}/internal`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        applicationUserData,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProfilesApi - functional programming interface
 * @export
 */
export const ProfilesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProfilesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiProfilesInternalListGet(
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApplicationUserDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiProfilesInternalListGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProfilesApi.apiProfilesInternalListGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiProfilesProfileExternalGet(
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApplicationUserDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiProfilesProfileExternalGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProfilesApi.apiProfilesProfileExternalGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiProfilesProfileInternalGet(
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApplicationUserDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiProfilesProfileInternalGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProfilesApi.apiProfilesProfileInternalGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} userId
     * @param {ApplicationUserData} [applicationUserData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiProfilesUserIdExternalPut(
      userId: number,
      applicationUserData?: ApplicationUserData,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiProfilesUserIdExternalPut(
          userId,
          applicationUserData,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProfilesApi.apiProfilesUserIdExternalPut"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} userId
     * @param {ApplicationUserData} [applicationUserData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiProfilesUserIdInternalPut(
      userId: number,
      applicationUserData?: ApplicationUserData,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiProfilesUserIdInternalPut(
          userId,
          applicationUserData,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProfilesApi.apiProfilesUserIdInternalPut"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ProfilesApi - factory interface
 * @export
 */
export const ProfilesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ProfilesApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiProfilesInternalListGet(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ApplicationUserDTO> {
      return localVarFp
        .apiProfilesInternalListGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiProfilesProfileExternalGet(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ApplicationUserDTO> {
      return localVarFp
        .apiProfilesProfileExternalGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiProfilesProfileInternalGet(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ApplicationUserDTO> {
      return localVarFp
        .apiProfilesProfileInternalGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} userId
     * @param {ApplicationUserData} [applicationUserData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiProfilesUserIdExternalPut(
      userId: number,
      applicationUserData?: ApplicationUserData,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .apiProfilesUserIdExternalPut(userId, applicationUserData, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} userId
     * @param {ApplicationUserData} [applicationUserData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiProfilesUserIdInternalPut(
      userId: number,
      applicationUserData?: ApplicationUserData,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .apiProfilesUserIdInternalPut(userId, applicationUserData, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
export class ProfilesApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfilesApi
   */
  public apiProfilesInternalListGet(options?: RawAxiosRequestConfig) {
    return ProfilesApiFp(this.configuration)
      .apiProfilesInternalListGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfilesApi
   */
  public apiProfilesProfileExternalGet(options?: RawAxiosRequestConfig) {
    return ProfilesApiFp(this.configuration)
      .apiProfilesProfileExternalGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfilesApi
   */
  public apiProfilesProfileInternalGet(options?: RawAxiosRequestConfig) {
    return ProfilesApiFp(this.configuration)
      .apiProfilesProfileInternalGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} userId
   * @param {ApplicationUserData} [applicationUserData]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfilesApi
   */
  public apiProfilesUserIdExternalPut(
    userId: number,
    applicationUserData?: ApplicationUserData,
    options?: RawAxiosRequestConfig
  ) {
    return ProfilesApiFp(this.configuration)
      .apiProfilesUserIdExternalPut(userId, applicationUserData, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} userId
   * @param {ApplicationUserData} [applicationUserData]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfilesApi
   */
  public apiProfilesUserIdInternalPut(
    userId: number,
    applicationUserData?: ApplicationUserData,
    options?: RawAxiosRequestConfig
  ) {
    return ProfilesApiFp(this.configuration)
      .apiProfilesUserIdInternalPut(userId, applicationUserData, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * TransactionHistoriesApi - axios parameter creator
 * @export
 */
export const TransactionHistoriesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTransactionHistoriesGet: async (
      pageIndex?: number,
      pageSize?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/TransactionHistories`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (pageIndex !== undefined) {
        localVarQueryParameter["pageIndex"] = pageIndex;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TransactionHistoriesApi - functional programming interface
 * @export
 */
export const TransactionHistoriesApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    TransactionHistoriesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiTransactionHistoriesGet(
      pageIndex?: number,
      pageSize?: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InternalTransactionHistoryDTOPaginatedList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiTransactionHistoriesGet(
          pageIndex,
          pageSize,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "TransactionHistoriesApi.apiTransactionHistoriesGet"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * TransactionHistoriesApi - factory interface
 * @export
 */
export const TransactionHistoriesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = TransactionHistoriesApiFp(configuration);
  return {
    /**
     *
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTransactionHistoriesGet(
      pageIndex?: number,
      pageSize?: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<InternalTransactionHistoryDTOPaginatedList> {
      return localVarFp
        .apiTransactionHistoriesGet(pageIndex, pageSize, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TransactionHistoriesApi - object-oriented interface
 * @export
 * @class TransactionHistoriesApi
 * @extends {BaseAPI}
 */
export class TransactionHistoriesApi extends BaseAPI {
  /**
   *
   * @param {number} [pageIndex]
   * @param {number} [pageSize]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionHistoriesApi
   */
  public apiTransactionHistoriesGet(
    pageIndex?: number,
    pageSize?: number,
    options?: RawAxiosRequestConfig
  ) {
    return TransactionHistoriesApiFp(this.configuration)
      .apiTransactionHistoriesGet(pageIndex, pageSize, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * WashOrderPlansApi - axios parameter creator
 * @export
 */
export const WashOrderPlansApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} [location]
     * @param {number} [fromLogisticsAmount]
     * @param {number} [toLogisticsAmount]
     * @param {ServiceType} [serviceType]
     * @param {string} [scheduleStartDate]
     * @param {string} [scheduleEndDate]
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrderPlansFilterGet: async (
      location?: string,
      fromLogisticsAmount?: number,
      toLogisticsAmount?: number,
      serviceType?: ServiceType,
      scheduleStartDate?: string,
      scheduleEndDate?: string,
      pageIndex?: number,
      pageSize?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/WashOrderPlans/filter`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (location !== undefined) {
        localVarQueryParameter["location"] = location;
      }

      if (fromLogisticsAmount !== undefined) {
        localVarQueryParameter["fromLogisticsAmount"] = fromLogisticsAmount;
      }

      if (toLogisticsAmount !== undefined) {
        localVarQueryParameter["toLogisticsAmount"] = toLogisticsAmount;
      }

      if (serviceType !== undefined) {
        localVarQueryParameter["serviceType"] = serviceType;
      }

      if (scheduleStartDate !== undefined) {
        localVarQueryParameter["scheduleStartDate"] =
          (scheduleStartDate as any) instanceof Date
            ? (scheduleStartDate as any).toISOString()
            : scheduleStartDate;
      }

      if (scheduleEndDate !== undefined) {
        localVarQueryParameter["scheduleEndDate"] =
          (scheduleEndDate as any) instanceof Date
            ? (scheduleEndDate as any).toISOString()
            : scheduleEndDate;
      }

      if (pageIndex !== undefined) {
        localVarQueryParameter["pageIndex"] = pageIndex;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrderPlansGet: async (
      pageIndex?: number,
      pageSize?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/WashOrderPlans`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (pageIndex !== undefined) {
        localVarQueryParameter["pageIndex"] = pageIndex;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {WashOrderPlanCreationDTO} [washOrderPlanCreationDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrderPlansPost: async (
      washOrderPlanCreationDTO?: WashOrderPlanCreationDTO,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/WashOrderPlans`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        washOrderPlanCreationDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {ServiceType} [serviceType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrderPlansServicetypeGet: async (
      serviceType?: ServiceType,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/WashOrderPlans/servicetype`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (serviceType !== undefined) {
        localVarQueryParameter["serviceType"] = serviceType;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * WashOrderPlansApi - functional programming interface
 * @export
 */
export const WashOrderPlansApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    WashOrderPlansApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} [location]
     * @param {number} [fromLogisticsAmount]
     * @param {number} [toLogisticsAmount]
     * @param {ServiceType} [serviceType]
     * @param {string} [scheduleStartDate]
     * @param {string} [scheduleEndDate]
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWashOrderPlansFilterGet(
      location?: string,
      fromLogisticsAmount?: number,
      toLogisticsAmount?: number,
      serviceType?: ServiceType,
      scheduleStartDate?: string,
      scheduleEndDate?: string,
      pageIndex?: number,
      pageSize?: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InternalWashOrderPlanDTOPaginatedList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWashOrderPlansFilterGet(
          location,
          fromLogisticsAmount,
          toLogisticsAmount,
          serviceType,
          scheduleStartDate,
          scheduleEndDate,
          pageIndex,
          pageSize,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WashOrderPlansApi.apiWashOrderPlansFilterGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWashOrderPlansGet(
      pageIndex?: number,
      pageSize?: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InternalWashOrderPlanDTOPaginatedList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWashOrderPlansGet(
          pageIndex,
          pageSize,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WashOrderPlansApi.apiWashOrderPlansGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {WashOrderPlanCreationDTO} [washOrderPlanCreationDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWashOrderPlansPost(
      washOrderPlanCreationDTO?: WashOrderPlanCreationDTO,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWashOrderPlansPost(
          washOrderPlanCreationDTO,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WashOrderPlansApi.apiWashOrderPlansPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {ServiceType} [serviceType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWashOrderPlansServicetypeGet(
      serviceType?: ServiceType,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<ExternalWashOrderPlanDTO>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWashOrderPlansServicetypeGet(
          serviceType,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "WashOrderPlansApi.apiWashOrderPlansServicetypeGet"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * WashOrderPlansApi - factory interface
 * @export
 */
export const WashOrderPlansApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = WashOrderPlansApiFp(configuration);
  return {
    /**
     *
     * @param {string} [location]
     * @param {number} [fromLogisticsAmount]
     * @param {number} [toLogisticsAmount]
     * @param {ServiceType} [serviceType]
     * @param {string} [scheduleStartDate]
     * @param {string} [scheduleEndDate]
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrderPlansFilterGet(
      location?: string,
      fromLogisticsAmount?: number,
      toLogisticsAmount?: number,
      serviceType?: ServiceType,
      scheduleStartDate?: string,
      scheduleEndDate?: string,
      pageIndex?: number,
      pageSize?: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<InternalWashOrderPlanDTOPaginatedList> {
      return localVarFp
        .apiWashOrderPlansFilterGet(
          location,
          fromLogisticsAmount,
          toLogisticsAmount,
          serviceType,
          scheduleStartDate,
          scheduleEndDate,
          pageIndex,
          pageSize,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrderPlansGet(
      pageIndex?: number,
      pageSize?: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<InternalWashOrderPlanDTOPaginatedList> {
      return localVarFp
        .apiWashOrderPlansGet(pageIndex, pageSize, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {WashOrderPlanCreationDTO} [washOrderPlanCreationDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrderPlansPost(
      washOrderPlanCreationDTO?: WashOrderPlanCreationDTO,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .apiWashOrderPlansPost(washOrderPlanCreationDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {ServiceType} [serviceType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrderPlansServicetypeGet(
      serviceType?: ServiceType,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<ExternalWashOrderPlanDTO>> {
      return localVarFp
        .apiWashOrderPlansServicetypeGet(serviceType, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * WashOrderPlansApi - object-oriented interface
 * @export
 * @class WashOrderPlansApi
 * @extends {BaseAPI}
 */
export class WashOrderPlansApi extends BaseAPI {
  /**
   *
   * @param {string} [location]
   * @param {number} [fromLogisticsAmount]
   * @param {number} [toLogisticsAmount]
   * @param {ServiceType} [serviceType]
   * @param {string} [scheduleStartDate]
   * @param {string} [scheduleEndDate]
   * @param {number} [pageIndex]
   * @param {number} [pageSize]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WashOrderPlansApi
   */
  public apiWashOrderPlansFilterGet(
    location?: string,
    fromLogisticsAmount?: number,
    toLogisticsAmount?: number,
    serviceType?: ServiceType,
    scheduleStartDate?: string,
    scheduleEndDate?: string,
    pageIndex?: number,
    pageSize?: number,
    options?: RawAxiosRequestConfig
  ) {
    return WashOrderPlansApiFp(this.configuration)
      .apiWashOrderPlansFilterGet(
        location,
        fromLogisticsAmount,
        toLogisticsAmount,
        serviceType,
        scheduleStartDate,
        scheduleEndDate,
        pageIndex,
        pageSize,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [pageIndex]
   * @param {number} [pageSize]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WashOrderPlansApi
   */
  public apiWashOrderPlansGet(
    pageIndex?: number,
    pageSize?: number,
    options?: RawAxiosRequestConfig
  ) {
    return WashOrderPlansApiFp(this.configuration)
      .apiWashOrderPlansGet(pageIndex, pageSize, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {WashOrderPlanCreationDTO} [washOrderPlanCreationDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WashOrderPlansApi
   */
  public apiWashOrderPlansPost(
    washOrderPlanCreationDTO?: WashOrderPlanCreationDTO,
    options?: RawAxiosRequestConfig
  ) {
    return WashOrderPlansApiFp(this.configuration)
      .apiWashOrderPlansPost(washOrderPlanCreationDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ServiceType} [serviceType]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WashOrderPlansApi
   */
  public apiWashOrderPlansServicetypeGet(
    serviceType?: ServiceType,
    options?: RawAxiosRequestConfig
  ) {
    return WashOrderPlansApiFp(this.configuration)
      .apiWashOrderPlansServicetypeGet(serviceType, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * WashOrdersApi - axios parameter creator
 * @export
 */
export const WashOrdersApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} [location]
     * @param {string} [orderNotes]
     * @param {number} [fromOrderAmount]
     * @param {number} [toOrderAmount]
     * @param {WashStatus} [washStatus]
     * @param {ServiceType} [serviceType]
     * @param {string} [orderStartDate]
     * @param {string} [orderEndDate]
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersFilterGet: async (
      location?: string,
      orderNotes?: string,
      fromOrderAmount?: number,
      toOrderAmount?: number,
      washStatus?: WashStatus,
      serviceType?: ServiceType,
      orderStartDate?: string,
      orderEndDate?: string,
      pageIndex?: number,
      pageSize?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/WashOrders/filter`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (location !== undefined) {
        localVarQueryParameter["location"] = location;
      }

      if (orderNotes !== undefined) {
        localVarQueryParameter["orderNotes"] = orderNotes;
      }

      if (fromOrderAmount !== undefined) {
        localVarQueryParameter["fromOrderAmount"] = fromOrderAmount;
      }

      if (toOrderAmount !== undefined) {
        localVarQueryParameter["toOrderAmount"] = toOrderAmount;
      }

      if (washStatus !== undefined) {
        localVarQueryParameter["washStatus"] = washStatus;
      }

      if (serviceType !== undefined) {
        localVarQueryParameter["serviceType"] = serviceType;
      }

      if (orderStartDate !== undefined) {
        localVarQueryParameter["orderStartDate"] =
          (orderStartDate as any) instanceof Date
            ? (orderStartDate as any).toISOString()
            : orderStartDate;
      }

      if (orderEndDate !== undefined) {
        localVarQueryParameter["orderEndDate"] =
          (orderEndDate as any) instanceof Date
            ? (orderEndDate as any).toISOString()
            : orderEndDate;
      }

      if (pageIndex !== undefined) {
        localVarQueryParameter["pageIndex"] = pageIndex;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersGet: async (
      pageIndex?: number,
      pageSize?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/WashOrders`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (pageIndex !== undefined) {
        localVarQueryParameter["pageIndex"] = pageIndex;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersOrderCountGet: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/WashOrders/order/count`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} orderId
     * @param {WashOrderUpdateDTO} [washOrderUpdateDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersOrderIdAddAdditionalorderPut: async (
      orderId: number,
      washOrderUpdateDTO?: WashOrderUpdateDTO,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'orderId' is not null or undefined
      assertParamExists(
        "apiWashOrdersOrderIdAddAdditionalorderPut",
        "orderId",
        orderId
      );
      const localVarPath =
        `/api/WashOrders/{orderId}/add/additionalorder`.replace(
          `{${"orderId"}}`,
          encodeURIComponent(String(orderId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        washOrderUpdateDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} orderId
     * @param {string} [assigneeId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersOrderIdAddAssigneePut: async (
      orderId: number,
      assigneeId?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'orderId' is not null or undefined
      assertParamExists(
        "apiWashOrdersOrderIdAddAssigneePut",
        "orderId",
        orderId
      );
      const localVarPath = `/api/WashOrders/{orderId}/add/assignee`.replace(
        `{${"orderId"}}`,
        encodeURIComponent(String(orderId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (assigneeId !== undefined) {
        localVarQueryParameter["assigneeId"] = assigneeId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} orderId
     * @param {WashOrderComplaintDTO} [washOrderComplaintDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersOrderIdAddComplaintPut: async (
      orderId: number,
      washOrderComplaintDTO?: WashOrderComplaintDTO,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'orderId' is not null or undefined
      assertParamExists(
        "apiWashOrdersOrderIdAddComplaintPut",
        "orderId",
        orderId
      );
      const localVarPath = `/api/WashOrders/{orderId}/add/complaint`.replace(
        `{${"orderId"}}`,
        encodeURIComponent(String(orderId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        washOrderComplaintDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersOrderIdAdditionalorderExternalGet: async (
      orderId: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'orderId' is not null or undefined
      assertParamExists(
        "apiWashOrdersOrderIdAdditionalorderExternalGet",
        "orderId",
        orderId
      );
      const localVarPath =
        `/api/WashOrders/{orderId}/additionalorder/external`.replace(
          `{${"orderId"}}`,
          encodeURIComponent(String(orderId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersOrderIdAdditionalorderInternalGet: async (
      orderId: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'orderId' is not null or undefined
      assertParamExists(
        "apiWashOrdersOrderIdAdditionalorderInternalGet",
        "orderId",
        orderId
      );
      const localVarPath =
        `/api/WashOrders/{orderId}/additionalorder/internal`.replace(
          `{${"orderId"}}`,
          encodeURIComponent(String(orderId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersOrderOrderIdStatusGet: async (
      orderId: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'orderId' is not null or undefined
      assertParamExists(
        "apiWashOrdersOrderOrderIdStatusGet",
        "orderId",
        orderId
      );
      const localVarPath = `/api/WashOrders/order/{orderId}/status`.replace(
        `{${"orderId"}}`,
        encodeURIComponent(String(orderId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersOrderReceivedCountGet: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/WashOrders/order/received/count`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {WashOrderStatusUpdateDTO} [washOrderStatusUpdateDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersOrderStatusPut: async (
      washOrderStatusUpdateDTO?: WashOrderStatusUpdateDTO,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/WashOrders/order/status`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        washOrderStatusUpdateDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersPaymentHistoryGet: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/WashOrders/payment/history`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {InitializeTransactionDTO} [initializeTransactionDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersPaymentInitiatePost: async (
      initializeTransactionDTO?: InitializeTransactionDTO,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/WashOrders/payment/initiate`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        initializeTransactionDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {WashOrderCreationDTO} [washOrderCreationDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersPost: async (
      washOrderCreationDTO?: WashOrderCreationDTO,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/WashOrders`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        washOrderCreationDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {SearchWashStatus} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersSearchwashstatusGet: async (
      status?: SearchWashStatus,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/WashOrders/searchwashstatus`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (status !== undefined) {
        localVarQueryParameter["status"] = status;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * WashOrdersApi - functional programming interface
 * @export
 */
export const WashOrdersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    WashOrdersApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} [location]
     * @param {string} [orderNotes]
     * @param {number} [fromOrderAmount]
     * @param {number} [toOrderAmount]
     * @param {WashStatus} [washStatus]
     * @param {ServiceType} [serviceType]
     * @param {string} [orderStartDate]
     * @param {string} [orderEndDate]
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWashOrdersFilterGet(
      location?: string,
      orderNotes?: string,
      fromOrderAmount?: number,
      toOrderAmount?: number,
      washStatus?: WashStatus,
      serviceType?: ServiceType,
      orderStartDate?: string,
      orderEndDate?: string,
      pageIndex?: number,
      pageSize?: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WashOrderDTOPaginatedList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWashOrdersFilterGet(
          location,
          orderNotes,
          fromOrderAmount,
          toOrderAmount,
          washStatus,
          serviceType,
          orderStartDate,
          orderEndDate,
          pageIndex,
          pageSize,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WashOrdersApi.apiWashOrdersFilterGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWashOrdersGet(
      pageIndex?: number,
      pageSize?: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WashOrderDTOPaginatedList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWashOrdersGet(
          pageIndex,
          pageSize,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WashOrdersApi.apiWashOrdersGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWashOrdersOrderCountGet(
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WashOrderCountDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWashOrdersOrderCountGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WashOrdersApi.apiWashOrdersOrderCountGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} orderId
     * @param {WashOrderUpdateDTO} [washOrderUpdateDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWashOrdersOrderIdAddAdditionalorderPut(
      orderId: number,
      washOrderUpdateDTO?: WashOrderUpdateDTO,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWashOrdersOrderIdAddAdditionalorderPut(
          orderId,
          washOrderUpdateDTO,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "WashOrdersApi.apiWashOrdersOrderIdAddAdditionalorderPut"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} orderId
     * @param {string} [assigneeId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWashOrdersOrderIdAddAssigneePut(
      orderId: number,
      assigneeId?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWashOrdersOrderIdAddAssigneePut(
          orderId,
          assigneeId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "WashOrdersApi.apiWashOrdersOrderIdAddAssigneePut"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} orderId
     * @param {WashOrderComplaintDTO} [washOrderComplaintDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWashOrdersOrderIdAddComplaintPut(
      orderId: number,
      washOrderComplaintDTO?: WashOrderComplaintDTO,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWashOrdersOrderIdAddComplaintPut(
          orderId,
          washOrderComplaintDTO,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "WashOrdersApi.apiWashOrdersOrderIdAddComplaintPut"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWashOrdersOrderIdAdditionalorderExternalGet(
      orderId: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AdditionalWashOrderDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWashOrdersOrderIdAdditionalorderExternalGet(
          orderId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "WashOrdersApi.apiWashOrdersOrderIdAdditionalorderExternalGet"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWashOrdersOrderIdAdditionalorderInternalGet(
      orderId: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AdditionalWashOrderDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWashOrdersOrderIdAdditionalorderInternalGet(
          orderId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "WashOrdersApi.apiWashOrdersOrderIdAdditionalorderInternalGet"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWashOrdersOrderOrderIdStatusGet(
      orderId: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<WashOrderStatusDTO>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWashOrdersOrderOrderIdStatusGet(
          orderId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "WashOrdersApi.apiWashOrdersOrderOrderIdStatusGet"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWashOrdersOrderReceivedCountGet(
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WashOrderReceivedCountDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWashOrdersOrderReceivedCountGet(
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "WashOrdersApi.apiWashOrdersOrderReceivedCountGet"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {WashOrderStatusUpdateDTO} [washOrderStatusUpdateDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWashOrdersOrderStatusPut(
      washOrderStatusUpdateDTO?: WashOrderStatusUpdateDTO,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWashOrdersOrderStatusPut(
          washOrderStatusUpdateDTO,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WashOrdersApi.apiWashOrdersOrderStatusPut"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWashOrdersPaymentHistoryGet(
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<TransactionHistoryDTO>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWashOrdersPaymentHistoryGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WashOrdersApi.apiWashOrdersPaymentHistoryGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {InitializeTransactionDTO} [initializeTransactionDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWashOrdersPaymentInitiatePost(
      initializeTransactionDTO?: InitializeTransactionDTO,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWashOrdersPaymentInitiatePost(
          initializeTransactionDTO,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WashOrdersApi.apiWashOrdersPaymentInitiatePost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {WashOrderCreationDTO} [washOrderCreationDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWashOrdersPost(
      washOrderCreationDTO?: WashOrderCreationDTO,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWashOrdersPost(
          washOrderCreationDTO,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WashOrdersApi.apiWashOrdersPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {SearchWashStatus} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWashOrdersSearchwashstatusGet(
      status?: SearchWashStatus,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<WashOrderDTO>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWashOrdersSearchwashstatusGet(
          status,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WashOrdersApi.apiWashOrdersSearchwashstatusGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * WashOrdersApi - factory interface
 * @export
 */
export const WashOrdersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = WashOrdersApiFp(configuration);
  return {
    /**
     *
     * @param {string} [location]
     * @param {string} [orderNotes]
     * @param {number} [fromOrderAmount]
     * @param {number} [toOrderAmount]
     * @param {WashStatus} [washStatus]
     * @param {ServiceType} [serviceType]
     * @param {string} [orderStartDate]
     * @param {string} [orderEndDate]
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersFilterGet(
      location?: string,
      orderNotes?: string,
      fromOrderAmount?: number,
      toOrderAmount?: number,
      washStatus?: WashStatus,
      serviceType?: ServiceType,
      orderStartDate?: string,
      orderEndDate?: string,
      pageIndex?: number,
      pageSize?: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<WashOrderDTOPaginatedList> {
      return localVarFp
        .apiWashOrdersFilterGet(
          location,
          orderNotes,
          fromOrderAmount,
          toOrderAmount,
          washStatus,
          serviceType,
          orderStartDate,
          orderEndDate,
          pageIndex,
          pageSize,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersGet(
      pageIndex?: number,
      pageSize?: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<WashOrderDTOPaginatedList> {
      return localVarFp
        .apiWashOrdersGet(pageIndex, pageSize, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersOrderCountGet(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<WashOrderCountDTO> {
      return localVarFp
        .apiWashOrdersOrderCountGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} orderId
     * @param {WashOrderUpdateDTO} [washOrderUpdateDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersOrderIdAddAdditionalorderPut(
      orderId: number,
      washOrderUpdateDTO?: WashOrderUpdateDTO,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .apiWashOrdersOrderIdAddAdditionalorderPut(
          orderId,
          washOrderUpdateDTO,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} orderId
     * @param {string} [assigneeId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersOrderIdAddAssigneePut(
      orderId: number,
      assigneeId?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .apiWashOrdersOrderIdAddAssigneePut(orderId, assigneeId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} orderId
     * @param {WashOrderComplaintDTO} [washOrderComplaintDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersOrderIdAddComplaintPut(
      orderId: number,
      washOrderComplaintDTO?: WashOrderComplaintDTO,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .apiWashOrdersOrderIdAddComplaintPut(
          orderId,
          washOrderComplaintDTO,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersOrderIdAdditionalorderExternalGet(
      orderId: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AdditionalWashOrderDTO> {
      return localVarFp
        .apiWashOrdersOrderIdAdditionalorderExternalGet(orderId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersOrderIdAdditionalorderInternalGet(
      orderId: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AdditionalWashOrderDTO> {
      return localVarFp
        .apiWashOrdersOrderIdAdditionalorderInternalGet(orderId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersOrderOrderIdStatusGet(
      orderId: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<WashOrderStatusDTO>> {
      return localVarFp
        .apiWashOrdersOrderOrderIdStatusGet(orderId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersOrderReceivedCountGet(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<WashOrderReceivedCountDTO> {
      return localVarFp
        .apiWashOrdersOrderReceivedCountGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {WashOrderStatusUpdateDTO} [washOrderStatusUpdateDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersOrderStatusPut(
      washOrderStatusUpdateDTO?: WashOrderStatusUpdateDTO,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .apiWashOrdersOrderStatusPut(washOrderStatusUpdateDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersPaymentHistoryGet(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<TransactionHistoryDTO>> {
      return localVarFp
        .apiWashOrdersPaymentHistoryGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {InitializeTransactionDTO} [initializeTransactionDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersPaymentInitiatePost(
      initializeTransactionDTO?: InitializeTransactionDTO,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .apiWashOrdersPaymentInitiatePost(initializeTransactionDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {WashOrderCreationDTO} [washOrderCreationDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersPost(
      washOrderCreationDTO?: WashOrderCreationDTO,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .apiWashOrdersPost(washOrderCreationDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {SearchWashStatus} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWashOrdersSearchwashstatusGet(
      status?: SearchWashStatus,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<WashOrderDTO>> {
      return localVarFp
        .apiWashOrdersSearchwashstatusGet(status, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * WashOrdersApi - object-oriented interface
 * @export
 * @class WashOrdersApi
 * @extends {BaseAPI}
 */
export class WashOrdersApi extends BaseAPI {
  /**
   *
   * @param {string} [location]
   * @param {string} [orderNotes]
   * @param {number} [fromOrderAmount]
   * @param {number} [toOrderAmount]
   * @param {WashStatus} [washStatus]
   * @param {ServiceType} [serviceType]
   * @param {string} [orderStartDate]
   * @param {string} [orderEndDate]
   * @param {number} [pageIndex]
   * @param {number} [pageSize]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WashOrdersApi
   */
  public apiWashOrdersFilterGet(
    location?: string,
    orderNotes?: string,
    fromOrderAmount?: number,
    toOrderAmount?: number,
    washStatus?: WashStatus,
    serviceType?: ServiceType,
    orderStartDate?: string,
    orderEndDate?: string,
    pageIndex?: number,
    pageSize?: number,
    options?: RawAxiosRequestConfig
  ) {
    return WashOrdersApiFp(this.configuration)
      .apiWashOrdersFilterGet(
        location,
        orderNotes,
        fromOrderAmount,
        toOrderAmount,
        washStatus,
        serviceType,
        orderStartDate,
        orderEndDate,
        pageIndex,
        pageSize,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [pageIndex]
   * @param {number} [pageSize]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WashOrdersApi
   */
  public apiWashOrdersGet(
    pageIndex?: number,
    pageSize?: number,
    options?: RawAxiosRequestConfig
  ) {
    return WashOrdersApiFp(this.configuration)
      .apiWashOrdersGet(pageIndex, pageSize, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WashOrdersApi
   */
  public apiWashOrdersOrderCountGet(options?: RawAxiosRequestConfig) {
    return WashOrdersApiFp(this.configuration)
      .apiWashOrdersOrderCountGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} orderId
   * @param {WashOrderUpdateDTO} [washOrderUpdateDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WashOrdersApi
   */
  public apiWashOrdersOrderIdAddAdditionalorderPut(
    orderId: number,
    washOrderUpdateDTO?: WashOrderUpdateDTO,
    options?: RawAxiosRequestConfig
  ) {
    return WashOrdersApiFp(this.configuration)
      .apiWashOrdersOrderIdAddAdditionalorderPut(
        orderId,
        washOrderUpdateDTO,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} orderId
   * @param {string} [assigneeId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WashOrdersApi
   */
  public apiWashOrdersOrderIdAddAssigneePut(
    orderId: number,
    assigneeId?: string,
    options?: RawAxiosRequestConfig
  ) {
    return WashOrdersApiFp(this.configuration)
      .apiWashOrdersOrderIdAddAssigneePut(orderId, assigneeId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} orderId
   * @param {WashOrderComplaintDTO} [washOrderComplaintDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WashOrdersApi
   */
  public apiWashOrdersOrderIdAddComplaintPut(
    orderId: number,
    washOrderComplaintDTO?: WashOrderComplaintDTO,
    options?: RawAxiosRequestConfig
  ) {
    return WashOrdersApiFp(this.configuration)
      .apiWashOrdersOrderIdAddComplaintPut(
        orderId,
        washOrderComplaintDTO,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} orderId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WashOrdersApi
   */
  public apiWashOrdersOrderIdAdditionalorderExternalGet(
    orderId: number,
    options?: RawAxiosRequestConfig
  ) {
    return WashOrdersApiFp(this.configuration)
      .apiWashOrdersOrderIdAdditionalorderExternalGet(orderId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} orderId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WashOrdersApi
   */
  public apiWashOrdersOrderIdAdditionalorderInternalGet(
    orderId: number,
    options?: RawAxiosRequestConfig
  ) {
    return WashOrdersApiFp(this.configuration)
      .apiWashOrdersOrderIdAdditionalorderInternalGet(orderId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} orderId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WashOrdersApi
   */
  public apiWashOrdersOrderOrderIdStatusGet(
    orderId: number,
    options?: RawAxiosRequestConfig
  ) {
    return WashOrdersApiFp(this.configuration)
      .apiWashOrdersOrderOrderIdStatusGet(orderId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WashOrdersApi
   */
  public apiWashOrdersOrderReceivedCountGet(options?: RawAxiosRequestConfig) {
    return WashOrdersApiFp(this.configuration)
      .apiWashOrdersOrderReceivedCountGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {WashOrderStatusUpdateDTO} [washOrderStatusUpdateDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WashOrdersApi
   */
  public apiWashOrdersOrderStatusPut(
    washOrderStatusUpdateDTO?: WashOrderStatusUpdateDTO,
    options?: RawAxiosRequestConfig
  ) {
    return WashOrdersApiFp(this.configuration)
      .apiWashOrdersOrderStatusPut(washOrderStatusUpdateDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WashOrdersApi
   */
  public apiWashOrdersPaymentHistoryGet(options?: RawAxiosRequestConfig) {
    return WashOrdersApiFp(this.configuration)
      .apiWashOrdersPaymentHistoryGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {InitializeTransactionDTO} [initializeTransactionDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WashOrdersApi
   */
  public apiWashOrdersPaymentInitiatePost(
    initializeTransactionDTO?: InitializeTransactionDTO,
    options?: RawAxiosRequestConfig
  ) {
    return WashOrdersApiFp(this.configuration)
      .apiWashOrdersPaymentInitiatePost(initializeTransactionDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {WashOrderCreationDTO} [washOrderCreationDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WashOrdersApi
   */
  public apiWashOrdersPost(
    washOrderCreationDTO?: WashOrderCreationDTO,
    options?: RawAxiosRequestConfig
  ) {
    return WashOrdersApiFp(this.configuration)
      .apiWashOrdersPost(washOrderCreationDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {SearchWashStatus} [status]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WashOrdersApi
   */
  public apiWashOrdersSearchwashstatusGet(
    status?: SearchWashStatus,
    options?: RawAxiosRequestConfig
  ) {
    return WashOrdersApiFp(this.configuration)
      .apiWashOrdersSearchwashstatusGet(status, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
